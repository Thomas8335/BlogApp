package com.example.myapplication;

import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database.DatabaseError;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.ValueEventListener;

import java.util.List;

/**
 * The presenter for the main activity, handling the business logic related to blog posts display.
 * It communicates between the View (MainActivity) and the data source (BlogFirebaseData).
 * Presenter generated by AI
 */
public class MainPresenter {

    private BlogFirebaseData blogFirebaseData;
    private View view;

    /**
     * Initializes the MainPresenter with the provided view interface.
     *
     * @param view the view interface to be linked with this presenter.
     */
    public MainPresenter(View view) {
        this.view = view;
        this.blogFirebaseData = new BlogFirebaseData();
    }

    /**
     * Loads all blog posts from Firebase and updates the view.
     */
    public void loadBlogs() {
        DatabaseReference blogDbRef = blogFirebaseData.open();

        blogDbRef.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(DataSnapshot dataSnapshot) {
                List<BlogPost> updatedBlogs = blogFirebaseData.updateBlogList(dataSnapshot);
                view.updateBlogs(updatedBlogs);
            }

            @Override
            public void onCancelled(DatabaseError databaseError) {
                // Handle possible errors.
            }
        });
    }

    /**
     * Interface to represent the view associated with this presenter.
     */
    public interface View {
        /**
         * Updates the list of blogs in the main view.
         *
         * @param blogs a list of {@link BlogPost} objects to be displayed.
         */
        void updateBlogs(List<BlogPost> blogs);
    }

    /**
     * Performs any cleanup operations when the presenter is no longer needed.
     */
    public void onDestroy() {
        blogFirebaseData.close();
    }
}
